{
  "type": "v1",
  "root": 0,
  "definitions": [
    {
      "name": "crypto_verify_msg_QueryMsg",
      "type": "enum",
      "cases": {
        "list_verification_schemes": {
          "description": "Returns a list of supported verification schemes.\nNo pagination - this is a short list.",
          "type": "named",
          "properties": {}
        },
        "verify_bls12_pairing_equality_g1": {
          "description": "BLS12-381 pairing equality verification (where the key is an element of G1)",
          "type": "named",
          "properties": {
            "dst": {
              "description": "The `dst` component used to hash the message to the curve",
              "value": 1
            },
            "msg": {
              "description": "The message that should be verified",
              "value": 1
            },
            "pubkey": {
              "description": "The public key point in its compressed format (element of G1)",
              "value": 1
            },
            "signature": {
              "description": "The signature point in its compressed format (element of G2)",
              "value": 1
            }
          }
        },
        "verify_bls12_pairing_equality_g2": {
          "description": "BLS12-381 pairing equality verification (where the key is an element of G2)",
          "type": "named",
          "properties": {
            "dst": {
              "description": "The `dst` component used to hash the message to the curve",
              "value": 1
            },
            "msg": {
              "description": "The message that should be verified",
              "value": 1
            },
            "pubkey": {
              "description": "The public key point in its compressed format (element of G2)",
              "value": 1
            },
            "signature": {
              "description": "The signature point in its compressed format (element of G1)",
              "value": 1
            }
          }
        },
        "verify_cosmos_signature": {
          "description": "Cosmos format (secp256k1 verification scheme).",
          "type": "named",
          "properties": {
            "message": {
              "description": "Message to verify.",
              "value": 1
            },
            "public_key": {
              "description": "Serialized compressed (33 bytes) or uncompressed (65 bytes) public key.",
              "value": 1
            },
            "signature": {
              "description": "Serialized signature. Cosmos format (64 bytes).",
              "value": 1
            }
          }
        },
        "verify_ethereum_text": {
          "description": "Ethereum text verification (compatible to the eth_sign RPC/web3 endpoint).\nThis cannot be used to verify transaction.\n\nSee https://web3js.readthedocs.io/en/v1.2.0/web3-eth.html#sign",
          "type": "named",
          "properties": {
            "message": {
              "description": "Message to verify. This will be wrapped in the standard container\n`\"\\x19Ethereum Signed Message:\\n\" + len(message) + message` before verification.",
              "value": 2
            },
            "signature": {
              "description": "Serialized signature. Fixed length format (64 bytes `r` and `s` plus the one byte `v`).",
              "value": 1
            },
            "signer_address": {
              "description": "Signer address.\nThis is matched case insensitive, so you can provide check-summed and non-check-summed addresses. Checksums are not validated.",
              "value": 2
            }
          }
        },
        "verify_ethereum_transaction": {
          "type": "named",
          "properties": {
            "chain_id": {
              "value": 3
            },
            "data": {
              "value": 1
            },
            "from": {
              "description": "Ethereum address in hex format (42 characters, starting with 0x)",
              "value": 2
            },
            "gas_limit": {
              "value": 4
            },
            "gas_price": {
              "value": 4
            },
            "nonce": {
              "value": 3
            },
            "r": {
              "value": 1
            },
            "s": {
              "value": 1
            },
            "to": {
              "description": "Ethereum address in hex format (42 characters, starting with 0x)",
              "value": 2
            },
            "v": {
              "value": 3
            },
            "value": {
              "value": 4
            }
          }
        },
        "verify_secp256_r1_signature": {
          "description": "Cosmos format (secp256r1 verification scheme).",
          "type": "named",
          "properties": {
            "message": {
              "description": "Message to verify.",
              "value": 1
            },
            "public_key": {
              "description": "Serialized compressed (33 bytes) or uncompressed (65 bytes) public key.",
              "value": 1
            },
            "signature": {
              "description": "Serialized signature. Cosmos format (64 bytes).",
              "value": 1
            }
          }
        },
        "verify_tendermint_batch": {
          "description": "Tendermint format (batch ed25519 verification scheme).",
          "type": "named",
          "properties": {
            "messages": {
              "description": "Messages to verify.",
              "value": 5
            },
            "public_keys": {
              "description": "Serialized public keys. Tendermint format (32 bytes).",
              "value": 5
            },
            "signatures": {
              "description": "Serialized signatures. Tendermint format (64 bytes).",
              "value": 5
            }
          }
        },
        "verify_tendermint_signature": {
          "description": "Tendermint format (ed25519 verification scheme).",
          "type": "named",
          "properties": {
            "message": {
              "description": "Message to verify.",
              "value": 1
            },
            "public_key": {
              "description": "Serialized public key. Tendermint format (32 bytes).",
              "value": 1
            },
            "signature": {
              "description": "Serialized signature. Tendermint format (64 bytes).",
              "value": 1
            }
          }
        },
        "verify_webauthn": {
          "description": "Webauthn component verification",
          "type": "named",
          "properties": {
            "authenticator_data": {
              "description": "Authenticator data",
              "value": 1
            },
            "challenge": {
              "description": "Challenge value",
              "value": 1
            },
            "client_data_json": {
              "description": "Client data (JSON encoded)",
              "value": 2
            },
            "r": {
              "description": "r component of signature\n\nThe representation of this component is a big-endian encoded 256bit integer",
              "value": 1
            },
            "s": {
              "description": "s component of signature\n\nThe representation of this component is a big-endian encoded 256bit integer",
              "value": 1
            },
            "x": {
              "description": "X coordinate of public key point\n\nUntagged big-endian serialized byte sequence representing the X coordinate on the secp256r1 elliptic curve",
              "value": 1
            },
            "y": {
              "description": "Y coordinate of public key point\n\nUntagged big-endian serialized byte sequence representing the Y coordinate on the secp256r1 elliptic curve",
              "value": 1
            }
          }
        }
      }
    },
    {
      "name": "cosmwasm_std_binary_Binary",
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization\nwith serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>.\nSee also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "binary"
    },
    {
      "name": "String",
      "type": "string"
    },
    {
      "name": "u64",
      "type": "integer",
      "precision": 64,
      "signed": false
    },
    {
      "name": "cosmwasm_std_math_uint128_Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding,\nsuch that the full u128 range can be used for clients that convert JSON numbers to floats,\nlike JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n```\n# use cosmwasm_std::Uint128;\nlet a = Uint128::from(123u128);\nassert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64);\nassert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32);\nassert_eq!(c.u128(), 70);\n```",
      "type": "integer",
      "precision": 128,
      "signed": false
    },
    {
      "name": "alloc::vec::Vec<cosmwasm_std::binary::Binary>",
      "type": "array",
      "items": 1
    }
  ]
}
